@model IEnumerable<IssueManager.Models.Issue>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Submit new issue</a>
</p>

@{
    // check if all issues belong to same project and write project name if this is the case. Could also somehow check query string, but this would duplicate parameter name here and in controller, or add extra data to view, but it would require creating a new class/model
    var pid = Model.Count() > 0 ? Model.First().project?.Id : null;
    if (pid != null && Model.All(issue => issue.project.Id == pid))
	{
		<p>Issues for project: @Model.First().project.Name</p>
	}
	else
    {
        <p>All issues:</p>
    }
}

@if (Model.Count() == 0)
{
	<p>No issues have been submitted yet.</p>
}
else
{
	<p>Issues submitted so far:</p>
}
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CodeSnippet)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Author)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.SubmitDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CloseDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LastUpdateDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CodeSnippet)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Author)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SubmitDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CloseDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastUpdateDate)
            </td>
            <td>
                <!-- this workaround is needed, because you can't call a method in a lambda expression -->
                @{var str = Issue.getIssueStatusEnumText((IssueStatus)item.Status);}
                @Html.DisplayFor(modelItem => str)
            </td>
            <td>
                <!--
                    <a asp-controller="Issues" asp-action="Index" asp-all-route-data="issuesParam">View project issues (issuesCount)</a> |
                -->
                    @{
                        var commentsParam = new Dictionary<string, string>
                        {
                            { "issueId", item.Id.ToString() }
                        };
                        var commentsCount = (item.Comments ?? new()).Count();
                        // note: to make it not-null we need to use eager loading on Issue list
                    }
                <a asp-controller="Comments" asp-route-id="@item.Id" asp-all-route-data="commentsParam">View comments (@commentsCount)</a> |
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
